(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{119:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"Logo",(function(){return p})),n.d(t,"default",(function(){return d}));var a=n(1),o=n(6),i=(n(0),n(130)),r=n(133),s={id:"obsidian-v0.2",title:"Announcing Obsidian 0.2",author:"Gan Jun Kai",author_title:"Co-author of Obsidian",author_url:"https://github.com/jk-gan",author_image_url:"https://avatars3.githubusercontent.com/u/7545747?s=460&u=ecd6fc8fcb20d3913c42489a1cbc9c1a5cb1aec0&v=4",tags:["obsidian","release"]},c={permalink:"/blog/obsidian-v0.2",source:"@site/blog/2020-04-23-obsidian-v0.2.0.md",description:"After months of hard work from the team, we are proud to announce the release of `obsidian` version 0.2. This release included a lot of features to improve `obsidian`'s developer experience. This blog post covers the highlights of the release.",date:"2020-04-23T00:00:00.000Z",tags:[{label:"obsidian",permalink:"/blog/tags/obsidian"},{label:"release",permalink:"/blog/tags/release"}],title:"Announcing Obsidian 0.2",truncated:!0,nextItem:{title:"How we migrate our framework into async/await",permalink:"/blog/async-migrate"}},l=[{value:"New Logo!",id:"new-logo",children:[]},{value:"Async/Await Support",id:"asyncawait-support",children:[]},{value:"Application State",id:"application-state",children:[]},{value:"Dynamic Context data",id:"dynamic-context-data",children:[]},{value:"Response Header",id:"response-header",children:[]},{value:"Other improvements",id:"other-improvements",children:[]},{value:"What is next?",id:"what-is-next",children:[]}],p=function(){return Object(i.b)("figure",null,Object(i.b)("img",{width:"550",src:Object(r.a)("img/obsidian.svg"),alt:"Screenshot of Obsidian logo"}))},b={rightToc:l,Logo:p};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"After months of hard work from the team, we are proud to announce the release of ",Object(i.b)("inlineCode",{parentName:"p"},"obsidian")," version 0.2. This release included a lot of features to improve ",Object(i.b)("inlineCode",{parentName:"p"},"obsidian"),"'s developer experience. This blog post covers the highlights of the release."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"obsidian")," is a Rust async http framework for reliable and efficient web."),Object(i.b)("h2",{id:"new-logo"},"New Logo!"),Object(i.b)(p,{mdxType:"Logo"}),Object(i.b)("p",null,"We now have a logo!"),Object(i.b)("h2",{id:"asyncawait-support"},"Async/Await Support"),Object(i.b)("p",null,"Rust 1.39 introduced ",Object(i.b)("inlineCode",{parentName:"p"},"async"),"/",Object(i.b)("inlineCode",{parentName:"p"},".await")," syntax, which can be used to write asynchronous funtion in synchronous way. It also makes the codes more straight forward. In ",Object(i.b)("inlineCode",{parentName:"p"},"obsidian"),", we treat the developer experience as on of the top priority goal. Thus, migration to async/await enabled structure is definitely needed."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"async fn get_user(mut ctx: Context) -> ContextResult {\n    #[derive(Serialize, Deserialize)]\n    struct User {\n        name: String,\n        age: i8,\n    }\n\n    let user: User = ctx.json().await?;\n\n    ctx.build_json(user).ok()\n}\n")),Object(i.b)("h2",{id:"application-state"},"Application State"),Object(i.b)("p",null,"Application state is shared with all the routes. It can be accessed by handlers and middlewares. You can inject your database connection in to application state."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'use obsidian::{context::Context, App, ObsidianError};\n\n#[derive(Clone)]\npub struct AppState {\n    pub db_connection_string: String,\n}\n\n#[tokio::main]\nasync fn main() {\n    let mut app: App<AppState> = App::new();\n    let addr = ([127, 0, 0, 1], 3000).into();\n\n    app.set_app_state(AppState {\n        db_connection_string: "localhost:1433".to_string()\n    });\n\n    app.get("/", |ctx: Context| async {\n        let app_state = ctx.get::<AppState>().ok_or(ObsidianError::NoneError)?;\n        let res = Some(format!("connection string: {}", &app_state.db_connection_string));\n\n        ctx.build(res).ok()\n    });\n\n    app.listen(&addr, || {\n        println!("server is listening to {}", &addr);\n    })\n    .await;\n}\n')),Object(i.b)("h2",{id:"dynamic-context-data"},"Dynamic Context data"),Object(i.b)("p",null,"Dynamic context data is just like application state, but within context scope. For example, it can be used to pass data between middlewares and handlers."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"async fn get_profile(ctx: Context) -> ContextResult {\n    let current_user = ctx\n        .extensions()\n        .get::<User>()\n        .ok_or(ObsidianError::NoneError)?;\n\n    ctx.build_json(current_user).ok()\n}\n")),Object(i.b)("h2",{id:"response-header"},"Response Header"),Object(i.b)("p",null,"You now can return a response with headers. And did I mention custom headers is supported as well?  "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),'async fn get_point(ctx: Context) -> ContextResult {\n    let point = Point { x: 1, y: 2 };\n\n    ctx.build_json(point)\n          .with_header(header::AUTHORIZATION, "token")\n          .with_header_str("X-Custom-Header", "Custom header value")\n          .ok()\n}\n')),Object(i.b)("h2",{id:"other-improvements"},"Other improvements"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"New Response Syntax"),": To solve the lifetime issue with ",Object(i.b)("inlineCode",{parentName:"li"},"context")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Bugs fixed on the Responder")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Apply ",Object(i.b)("inlineCode",{parentName:"strong"},"clippy")," to the source code"))),Object(i.b)("h2",{id:"what-is-next"},"What is next?"),Object(i.b)("p",null,"As we mentioned, developer experience and productivity are always our top priority in ",Object(i.b)("inlineCode",{parentName:"p"},"obsidian"),". The framework is still new and needed a lot of improvements. We always have the convesation on improving those confusing API and syntax noise. We also want to explore more the possibility of the type system, hopefully most of the errors will be captured on compile time. If you managed to appease the compiler, there\u2019s a good chance your code will work\u2013barring any logic flaws."),Object(i.b)("p",null,"We are also planning to provide generator to generate new ",Object(i.b)("inlineCode",{parentName:"p"},"obsidian")," project. We don't have final a decision yet, it could be just a boilerplate like ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://create-react-app.dev/"}),Object(i.b)("inlineCode",{parentName:"a"},"create-react-app"))," but for backend, or something like ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://rubyonrails.org/"}),Object(i.b)("inlineCode",{parentName:"a"},"rails"))," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.phoenixframework.org/"}),Object(i.b)("inlineCode",{parentName:"a"},"phoenix"))," with ",Object(i.b)("strong",{parentName:"p"},"convention over configuration")," DNA to ease developer's jobs. The generated project will include database connection config by default because we found that setting up database connection everytime for a new project is quite annoying. We want to let our users focus on the important stuffs without sweating the small things."),Object(i.b)("p",null,"According to ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://blog.rust-lang.org/2020/04/17/Rust-survey-2019.html"}),"Rust 2019 survey"),", productivity is still an important goal for their work. Most of the developers in the survey, with Rust or without Rust, are working on backend application. Therefore we think we are on the right track. We want to build a framework focus on developer experience and productivity and more importantly, we will enjoy using it everyday. "),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"The documentation is a WIP")))}d.isMDXComponent=!0}}]);